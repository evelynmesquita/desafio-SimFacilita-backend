generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id         Int       @id @default(autoincrement())
  postId     Int?
  userId     Int?
  comment    String?   @db.VarChar(150)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  Post       Post?     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User       User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Follow {
  id                           Int   @id @default(autoincrement())
  followerId                   Int?
  followedId                   Int?
  User_Follow_followedIdToUser User? @relation("Follow_followedIdToUser", fields: [followedId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User_Follow_followerIdToUser User? @relation("Follow_followerIdToUser", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Post {
  id          Int       @id @default(autoincrement())
  userId      Int?
  description String?   @db.VarChar(500)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  Comment     Comment[]
  User        User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Session {
  id         Int       @id @default(autoincrement())
  userId     Int?
  token      String?   @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  User       User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id                             Int       @id @default(autoincrement())
  name                           String?   @db.VarChar(255)
  lastName                       String?   @db.VarChar(255)
  birthday                       DateTime? @db.Timestamp(6)
  phone                          String?   @db.VarChar(255)
  email                          String?   @unique @db.VarChar(255)
  password                       String?   @db.VarChar(255)
  profileUrl                     String?   @db.VarChar
  created_at                     DateTime? @default(now()) @db.Timestamp(6)
  updated_at                     DateTime? @db.Timestamp(6)
  Comment                        Comment[]
  Follow_Follow_followedIdToUser Follow[]  @relation("Follow_followedIdToUser")
  Follow_Follow_followerIdToUser Follow[]  @relation("Follow_followerIdToUser")
  Post                           Post[]
  Session                        Session[]
}
